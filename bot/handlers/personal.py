import logging

import telegram
from django.conf import settings
from django.core.cache import cache
from django.urls import reverse
from telegram import Update

from bot.common import send_telegram_message, Chat
from bot.handlers.common import get_bot_user
from posts.forms.compose import PostTextForm, POST_TYPE_MAP
from posts.models import Post
from users.models import User

BOT_USER_POST_KEY = "bot:user:{}:post"
BOT_USER_POST_TTL = 60 * 60 * 48  # 48 hour

log = logging.getLogger(__name__)


def process_auth(update: Update):
    user = User.objects.filter(secret_hash=str(update.message.text).strip()).first()
    if not user:
        send_telegram_message(
            chat=Chat(id=update.effective_chat.id),
            text="–ü—Ä–∏–≤–µ—Ç. –ú—ã –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞–∫–æ–º—ã. –ü—Ä–∏–≤—è–∂–∏ –º–µ–Ω—è –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ üëá"
        )
        return

    user.telegram_id = update.effective_user.id
    user.telegram_data = {
        "id": update.effective_user.id,
        "username": update.effective_user.username,
        "first_name": update.effective_user.first_name,
        "last_name": update.effective_user.last_name,
        "language_code": update.effective_user.language_code,
    }
    user.save()

    send_telegram_message(
        chat=Chat(id=update.effective_chat.id),
        text=f"–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user.slug}"
    )
    cache.delete("bot:telegram_user_ids")


def process_personal_chat_updates(update: Update):
    user = get_bot_user(update)
    if not user:
        return

    # check for unfinished posts
    unfinished_post = cached_post_get(update.effective_user.id)

    # found an unfinished post
    if unfinished_post:
        reply = continue_posting(update, unfinished_post, user)
        if reply:
            send_telegram_message(
                chat=Chat(id=update.effective_chat.id),
                text=reply
            )
        return

    # parse forwarded posts and links
    if update.message:
        reply = parse_forwarded_messages(update)
        if reply:
            send_telegram_message(
                chat=Chat(id=update.effective_chat.id),
                text=reply
            )
        return

    send_telegram_message(
        chat=Chat(id=update.effective_chat.id),
        text="–ß–æ—Ç –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞ ü§î"
    )


def parse_forwarded_messages(update: Update):
    started_post = {
        "title": None,
        "type": Post.TYPE_POST,
        "text": update.message.text or update.message.caption,
        "url": None,
        "is_visible": True,
        "is_public": True,
    }
    for entity, text in update.message.parse_entities().items():
        if entity.type == "url":
            started_post["url"] = text
        elif entity.type == "bold":
            started_post["title"] = text

    # save it to user cache
    cached_post_set(update.effective_user.id, started_post)

    if started_post["url"]:
        # looks like a link
        send_telegram_message(
            chat=Chat(id=update.effective_chat.id),
            text=f"–í—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Å—Å—ã–ª–∫–∞. –•–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –µ–π –≤ –ö–ª—É–±–µ? –ö–∞–∫ –±—É–¥–µ–º –ø–æ—Å—Ç–∏—Ç—å?",
            reply_markup=telegram.InlineKeyboardMarkup([
                [
                    telegram.InlineKeyboardButton("üîó –°—Å—ã–ª–∫–æ–π", callback_data=f"link"),
                    telegram.InlineKeyboardButton("üìù –ö–∞–∫ –ø–æ—Å—Ç", callback_data=f"post"),
                ],
                [
                    telegram.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"nope"),
                ]
            ])
        )
    else:
        # looks like a text post
        if len(started_post["text"] or "") < 120:
            return "–ù–∞–ø–∏—à–∏ –∏–ª–∏ —Ñ–æ—Ä–≤–∞—Ä–¥–Ω–∏ –º–Ω–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É!"

        send_telegram_message(
            chat=Chat(id=update.effective_chat.id),
            text=f"–•–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º –≤ –ö–ª—É–±–µ? –ö–∞–∫ –±—É–¥–µ–º –ø–æ—Å—Ç–∏—Ç—å?",
            reply_markup=telegram.InlineKeyboardMarkup([
                [
                    telegram.InlineKeyboardButton("üìù –ö–∞–∫ –ø–æ—Å—Ç", callback_data=f"post"),
                    telegram.InlineKeyboardButton("‚ùî –í–æ–ø—Ä–æ—Å–æ–º", callback_data=f"question"),
                ],
                [
                    telegram.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"nope"),
                ]
            ])
        )


def continue_posting(update: Update, started_post: dict, user: User):
    if update.callback_query:
        if update.callback_query.data == "nope":
            # cancel posting
            cached_post_delete(update.effective_user.id)
            return "–û–∫, –∑–∞–±—ã–ª–∏ üëå"

        elif update.callback_query.data in {"post", "link", "question"}:
            # ask for title
            started_post["type"] = update.callback_query.data
            cached_post_set(update.effective_user.id, started_post)
            return f"–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –Ω–∞–¥–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, —á—Ç–æ–±—ã –≤—Å–µ–º –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ –æ —á–µ–º —ç—Ç–æ. " \
                   f"–ü–æ–¥—É–º–∞–π—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º üëá"

        elif update.callback_query.data == "go":
            # go-go-go, post the post
            FormClass = POST_TYPE_MAP.get(started_post["type"]) or PostTextForm

            form = FormClass(started_post)
            if not form.is_valid():
                return f"ü§¶‚Äç‚ôÇÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–º –±–∞–≥—Ä–µ–ø–æ—Ä—Ç. " \
                       f"–í–æ—Ç –æ—à–∏–±–∫–∞:\n```{str(form.errors)}```"

            if Post.check_duplicate(user=user, title=form.cleaned_data["title"]):
                return "ü§î –í—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –¥—É–±–ª–∏–∫–∞—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ—à–ª–æ–≥–æ –ø–æ—Å—Ç–∞. " \
                       "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å—ë –ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∏–∂–µ –¥—Ä—É–≥–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ üëá"

            is_ok = Post.check_rate_limits(user)
            if not is_ok:
                return "üôÖ‚Äç‚ôÇÔ∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–æ—Å—Ç–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø–æ–∑–∂–µ"

            post = form.save(commit=False)
            post.author = user
            post.type = started_post["type"]
            post.meta = {"telegram": update.to_json()}
            post.save()

            post_url = settings.APP_HOST + reverse("show_post", kwargs={
                "post_type": post.type,
                "post_slug": post.slug
            })
            cached_post_delete(update.effective_user.id)
            return f"–ó–∞–ø–æ—Å—Ç–∏–ª–∏ üöÄüöÄüöÄ\n\n{post_url}"

    if update.message:
        started_post["title"] = str(update.message.text or update.message.caption or "").strip()[:128]
        if len(started_post["title"]) < 7:
            send_telegram_message(
                chat=Chat(id=update.effective_chat.id),
                text=f"–ö–∞–∫–æ–π-—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫. –ü—Ä–∏—à–ª–∏—Ç–µ –¥—Ä—É–≥–æ–π, –ø–æ–¥–ª–∏–Ω–µ–µ",
                reply_markup=telegram.InlineKeyboardMarkup([
                    [
                        telegram.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—ë", callback_data=f"nope"),
                    ]
                ])
            )
            return

        cached_post_set(update.effective_user.id, started_post)
        emoji = Post.TYPE_TO_EMOJI.get(started_post["type"]) or "üî•"
        send_telegram_message(
            chat=Chat(id=update.effective_chat.id),
            text=f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫-—Ç–æ —Ç–∞–∫:\n\n"
                 f"{emoji} <b>{started_post['title']}</b>\n\n"
                 f"{started_post['text'] or ''}\n\n"
                 f"{started_post['url'] or ''}\n\n"
                 f"<b>–ë—É–¥–µ–º –ø–æ—Å—Ç–∏—Ç—å?</b> (–ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –µ–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ)",
            reply_markup=telegram.InlineKeyboardMarkup([
                [
                    telegram.InlineKeyboardButton("‚úÖ –ü–æ–µ—Ö–∞–ª–∏", callback_data=f"go"),
                    telegram.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"nope"),
                ],
            ])
        )


def cached_post_get(telegram_user_id):
    return cache.get(BOT_USER_POST_KEY.format(telegram_user_id))


def cached_post_set(telegram_user_id, data):
    return cache.set(
        BOT_USER_POST_KEY.format(telegram_user_id),
        data,
        BOT_USER_POST_TTL
    )


def cached_post_delete(telegram_user_id):
    return cache.delete(BOT_USER_POST_KEY.format(telegram_user_id))
